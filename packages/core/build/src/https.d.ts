import { HttpRequest, HttpRequestData } from "@discall/types";
export default function client(_token: string): (packet: HttpRequest) => Promise<any>;
export declare function create<T extends (...args: any[]) => any>(action: HttpRequestData, cache?: T, reason?: string): HttpRequest;
export declare function create(action: HttpRequestData, reason?: string): HttpRequest;
export declare function get<T extends (...args: any[]) => any>(action: HttpRequestData, cache?: T, reason?: string): HttpRequest;
export declare function get(action: HttpRequestData, reason?: string): HttpRequest;
export declare function edit<T extends (...args: any[]) => any>(action: HttpRequestData, cache?: T, reason?: string): HttpRequest;
export declare function edit(action: HttpRequestData, reason?: string): HttpRequest;
export declare function remove<T extends (...args: any[]) => any>(action: HttpRequestData, cache?: T, reason?: string): HttpRequest;
export declare function remove(action: HttpRequestData, reason?: string): HttpRequest;
export declare const crosspost: typeof create;
export declare const bulkDelete: typeof create;
export declare const follow: typeof create;
export declare const trigger: typeof create;
export declare const start: typeof create;
export declare const begin: typeof create;
export declare const execute: typeof create;
export declare const list: typeof get;
export declare const search: typeof get;
export declare const modify: typeof edit;
export declare const pin: typeof edit;
export declare const add: typeof edit;
export declare const join: typeof edit;
export declare const sync: typeof edit;
export declare const close: typeof remove;
export declare const unpin: typeof remove;
export declare const leave: typeof remove;
export declare function send(packet: HttpRequest): Promise<any>;
