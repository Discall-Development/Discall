{
  "version": 3,
  "sources": ["../../src/ws.ts"],
  "sourcesContent": ["import WebSocket from 'ws'\nimport {pack, unpack} from 'etf.js';\n\nimport {BotType, DiscordData, DiscordDataProcesserType, OpCode} from './type';\nimport {VersionError, EncodingError} from './errors';\nimport Intents from './Intents';\nimport DiscordDataProcesser from \"./Processer\";\n\nexport default class DiscallWS {\n\tpublic processer: DiscordDataProcesserType;\n\n\tprivate ws: WebSocket;\n\tprivate readonly encoding: 'json' | 'etf';\n\tprivate readonly version: number;\n\tprivate wsUri: URL = new URL('wss://gateway.discord.gg');\n\tprivate opened: boolean = false;\n\n\tconstructor(\n\t\ttoken: string,\n\t\tintents: Intents = Intents.none(),\n\t\tencoding: string = 'etf',\n\t\tversion: number = 9,\n\t\tbot: BotType\n\t) {\n\t\tif (version < 8 || version > 9)\n\t\t\tthrow new VersionError(version);\n\t\tthis.version = version;\n\n\t\tif (encoding !== 'json' && encoding !== 'etf')\n\t\t\tthrow new EncodingError(encoding);\n\t\tthis.encoding = encoding;\n\t\t\n\t\tthis.wsUri.searchParams.append('v', `${this.version}`);\n\t\tthis.wsUri.searchParams.append('encoding', this.encoding);\n\n\t\tthis.ws = new WebSocket(this.wsUri.toString());\n\t\t\n\t\tthis.ws.onopen = this.onOpen.bind(this);\n\t\tthis.ws.onclose = this.onClose.bind(this);\n\t\tthis.ws.onerror = this.onError.bind(this);\n\t\tthis.ws.onmessage = this.onMessage.bind(this);\n\n\t\tthis.processer = new DiscordDataProcesser(token, intents, bot);\n\t}\n\n\tpublic send(data: DiscordData): void {\n\t\tlet raw_data: string | Buffer;\n\t\tif (this.encoding == 'json')\n\t\t\traw_data = JSON.stringify(data);\n\t\telse\n\t\t\traw_data = this.encode(data);\n\n\t\tthis.ws.send(raw_data, (err?: Error) => {\n\t\t\tif (err)\n\t\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\tpublic get isopen(): boolean {\n\t\treturn this.opened;\n\t}\n\n\tprivate onOpen(event: WebSocket.Event): void { this.opened = true; }\n\t\n\tprivate onClose(event: WebSocket.CloseEvent): void {\n\t\tconsole.log('ws closed.\\n');\n\t}\n\t\n\tprivate onError(event: WebSocket.ErrorEvent): void {\n\t\tconsole.log('ws errored.\\n');\n\t}\n\t\n\tprivate onMessage(event: WebSocket.MessageEvent): void {\n\t\tlet data: DiscordData | WebSocket.Data = event.data;\n\n\t\tif (this.encoding == 'etf') {\n\t\t\tdata = this.decode(data as Buffer);\n\t\t} else if (this.encoding == 'json') {\n\t\t\tdata = JSON.parse(data as string);\n\t\t}\n\n\t\tthis.processData(data as DiscordData).then(() => {});\n\t}\n\n\tprivate async processData(data: DiscordData): Promise<void> {\n\t\tswitch(data.op) {\n\t\t\tcase OpCode.Dispatch:\n\t\t\t\treturn await this.processer.Dispatch(data, this);\n\t\t\tcase OpCode.Heartbeat:\n\t\t\t\treturn await this.processer.Heartbeat(data, this);\n\t\t\tcase OpCode.Reconnect:\n\t\t\t\treturn await this.processer.Reconnect(data, this);\n\t\t\tcase OpCode.InvalidSession:\n\t\t\t\treturn await this.processer.InvalidSession(data, this);\n\t\t\tcase OpCode.Hello:\n\t\t\t\treturn await this.processer.Hello(data, this);\n\t\t\tcase OpCode.HeartbeatACK:\n\t\t\t\treturn await this.processer.HeartbeatACK(data, this);\n\t\t}\n\t}\n\t\n\tprivate decode(buf: Buffer): DiscordData {\n\t\treturn unpack(buf) as DiscordData;\n\t}\n\t\n\tprivate encode(buf: DiscordData): Buffer {\n\t\treturn pack(buf) as Buffer;\n\t}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAsB;AACtB,iBAA2B;AAE3B,kBAAqE;AACrE,oBAA0C;AAC1C,qBAAoB;AACpB,uBAAiC;AAEjC,MAAO,UAAwB;AAAA,EACvB;AAAA,EAEC;AAAA,EACS;AAAA,EACA;AAAA,EACT,QAAa,IAAI,IAAI,0BAA0B;AAAA,EAC/C,SAAkB;AAAA,EAE1B,YACC,OACA,UAAmB,uBAAQ,KAAK,GAChC,WAAmB,OACnB,UAAkB,GAClB,KACC;AACD,QAAI,UAAU,KAAK,UAAU;AAC5B,YAAM,IAAI,2BAAa,OAAO;AAC/B,SAAK,UAAU;AAEf,QAAI,aAAa,UAAU,aAAa;AACvC,YAAM,IAAI,4BAAc,QAAQ;AACjC,SAAK,WAAW;AAEhB,SAAK,MAAM,aAAa,OAAO,KAAK,GAAG,KAAK,SAAS;AACrD,SAAK,MAAM,aAAa,OAAO,YAAY,KAAK,QAAQ;AAExD,SAAK,KAAK,IAAI,kBAAU,KAAK,MAAM,SAAS,CAAC;AAE7C,SAAK,GAAG,SAAS,KAAK,OAAO,KAAK,IAAI;AACtC,SAAK,GAAG,UAAU,KAAK,QAAQ,KAAK,IAAI;AACxC,SAAK,GAAG,UAAU,KAAK,QAAQ,KAAK,IAAI;AACxC,SAAK,GAAG,YAAY,KAAK,UAAU,KAAK,IAAI;AAE5C,SAAK,YAAY,IAAI,yBAAqB,OAAO,SAAS,GAAG;AAAA,EAC9D;AAAA,EAEO,KAAK,MAAyB;AACpC,QAAI;AACJ,QAAI,KAAK,YAAY;AACpB,iBAAW,KAAK,UAAU,IAAI;AAAA;AAE9B,iBAAW,KAAK,OAAO,IAAI;AAE5B,SAAK,GAAG,KAAK,UAAU,CAAC,QAAgB;AACvC,UAAI;AACH,gBAAQ,MAAM,GAAG;AAAA,IACnB,CAAC;AAAA,EACF;AAAA,MAEW,SAAkB;AAC5B,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,OAAO,OAA8B;AAAE,SAAK,SAAS;AAAA,EAAM;AAAA,EAE3D,QAAQ,OAAmC;AAClD,YAAQ,IAAI,cAAc;AAAA,EAC3B;AAAA,EAEQ,QAAQ,OAAmC;AAClD,YAAQ,IAAI,eAAe;AAAA,EAC5B;AAAA,EAEQ,UAAU,OAAqC;AACtD,QAAI,OAAqC,MAAM;AAE/C,QAAI,KAAK,YAAY,OAAO;AAC3B,aAAO,KAAK,OAAO,IAAc;AAAA,IAClC,WAAW,KAAK,YAAY,QAAQ;AACnC,aAAO,KAAK,MAAM,IAAc;AAAA,IACjC;AAEA,SAAK,YAAY,IAAmB,EAAE,KAAK,MAAM;AAAA,IAAC,CAAC;AAAA,EACpD;AAAA,QAEc,YAAY,MAAkC;AAC3D,YAAO,KAAK;AAAA,WACN,mBAAO;AACX,eAAO,MAAM,KAAK,UAAU,SAAS,MAAM,IAAI;AAAA,WAC3C,mBAAO;AACX,eAAO,MAAM,KAAK,UAAU,UAAU,MAAM,IAAI;AAAA,WAC5C,mBAAO;AACX,eAAO,MAAM,KAAK,UAAU,UAAU,MAAM,IAAI;AAAA,WAC5C,mBAAO;AACX,eAAO,MAAM,KAAK,UAAU,eAAe,MAAM,IAAI;AAAA,WACjD,mBAAO;AACX,eAAO,MAAM,KAAK,UAAU,MAAM,MAAM,IAAI;AAAA,WACxC,mBAAO;AACX,eAAO,MAAM,KAAK,UAAU,aAAa,MAAM,IAAI;AAAA;AAAA,EAEtD;AAAA,EAEQ,OAAO,KAA0B;AACxC,WAAO,uBAAO,GAAG;AAAA,EAClB;AAAA,EAEQ,OAAO,KAA0B;AACxC,WAAO,qBAAK,GAAG;AAAA,EAChB;AACD;",
  "names": []
}
