// Generated by dts-bundle v0.7.3

export class Zip {
    static Flags: {
        ENCRYPT: number;
        DESCRIPTOR: number;
        UTF8: number;
    };
    static CompressionMethod: {
        STORE: number;
        DEFLATE: number;
    };
    static OperatingSystem: {
        MSDOS: number;
        UNIX: number;
        MACINTOSH: number;
    };
    constructor(opt_params?: any);
    static FileHeaderSignature: number[];
    static LocalFileHeaderSignature: number[];
    static CentralDirectorySignature: number[];
    addFile(input: Array<number> | Uint8Array, opt_params: any): void;
    setPassword(password: Array<number> | Uint8Array): void;
    compress(): any;
    deflateWithOption(input: Array<number> | Uint8Array, opt_params: Object): number[] | Uint8Array;
    static getByte(key: Array<number> | Uint32Array): number;
    encode(key: Array<number> | Uint32Array, n: number): number;
    static updateKeys: (key: Array<number> | Uint32Array, n: number) => void;
    static createEncryptionKey(password: Array<number> | Uint8Array): number[] | Uint32Array;
}

export class FileHeader {
    input: Array<number> | Uint8Array;
    offset: number;
    length: number;
    version: number;
    os: number;
    needVersion: number;
    flags: number;
    compression: number;
    time: number;
    date: number;
    crc32: number;
    compressedSize: number;
    plainSize: number;
    fileNameLength: number;
    extraFieldLength: number;
    fileCommentLength: number;
    diskNumberStart: number;
    internalFileAttributes: number;
    externalFileAttributes: number;
    relativeOffset: number;
    filename: string;
    extraField: Array<number> | Uint8Array;
    comment: Array<number> | Uint8Array;
    constructor(input: Array<number> | Uint8Array, ip: number);
    static Flags: {
        ENCRYPT: number;
        DESCRIPTOR: number;
        UTF8: number;
    };
    parse(): void;
}
export class LocalFileHeader {
    input: Array<number> | Uint8Array;
    offset: number;
    length: number;
    version: number;
    os: number;
    needVersion: number;
    flags: number;
    compression: number;
    time: number;
    date: number;
    crc32: number;
    compressedSize: number;
    plainSize: number;
    fileNameLength: number;
    extraFieldLength: number;
    fileCommentLength: number;
    diskNumberStart: number;
    internalFileAttributes: number;
    externalFileAttributes: number;
    relativeOffset: number;
    filename: string;
    extraField: Array<number> | Uint8Array;
    comment: Array<number> | Uint8Array;
    static Flags: {
        ENCRYPT: number;
        DESCRIPTOR: number;
        UTF8: number;
    };
    constructor(input: Array<number> | Uint8Array, ip: number);
    parse(): void;
}
export class Unzip {
    input: Array<number> | Uint8Array;
    ip: number;
    eocdrOffset: number;
    numberOfThisDisk: number;
    startDisk: number;
    totalEntriesThisDisk: number;
    totalEntries: number;
    centralDirectorySize: number;
    centralDirectoryOffset: number;
    commentLength: number;
    comment: Array<number> | Uint8Array;
    fileHeaderList: Array<FileHeader>;
    filenameToIndex: {};
    verify: boolean;
    password: Array<number> | Uint8Array;
    static CompressionMethod: {
        STORE: number;
        DEFLATE: number;
    };
    static FileHeaderSignature: number[];
    static LocalFileHeaderSignature: number[];
    static CentralDirectorySignature: number[];
    constructor(input: Array<number> | Uint8Array, opt_params?: any);
    getFileHeaderAttribute(filename: string, attributeName: string): any;
    searchEndOfCentralDirectoryRecord(): void;
    parseEndOfCentralDirectoryRecord(): void;
    parseFileHeader(): void;
    getFileData(index: number, opt_params: any): any;
    getFilenames(): any[];
    decompress(filename: string, opt_params: any): any;
    /**
      * @param {(Array.<number>|Uint8Array)} password
      */
    setPassword(password: Array<number> | Uint8Array): void;
    decode(key: Array<number> | Uint32Array, n: number): number;
    updateKeys: (key: number[] | Uint32Array, n: number) => void;
    createDecryptionKey: typeof Zip.createEncryptionKey;
    getByte: typeof Zip.getByte;
}

